/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.imos.sample;

import com.imos.sample.util.TestConfig;
import com.invicara.xos.core.repository.IRepositoryConnection;
import com.invicara.xos.core.repository.IRepositoryContextDatabase;
import com.invicara.xos.core.repository.RepositoryException;
import com.invicara.xos.core.requests.IRequestContext;
import com.invicara.xos.logger.XOSLogger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.aeonbits.owner.ConfigFactory;

/**
 *
 * @author alok
 */
public class TestDatabase implements IRepositoryConnection, IRepositoryContextDatabase, AutoCloseable {

    boolean autoGenerated;
    Connection connection;
    Statement statement;
    PreparedStatement preparedStatement;
    ResultSet resultSet;
    TestConfig config;
    XOSLogger logger;
    String url = "%s//$s:%d/$s";

    public TestDatabase(IRequestContext context) {
        config = ConfigFactory.create(TestConfig.class, System.getenv());
    }

    Connection getConnection() {
        try {
            Class.forName(config.driver());
            connection = DriverManager.getConnection(String.format(url,
                    config.protocol(),
                    config.host(),
                    config.port(),
                    config.database()),
                    config.user(),
                    config.password());
        } catch (ClassNotFoundException | SQLException ex) {
            logger.event(new TestLog());
        }
        return connection;
    }

    @Override
    public PreparedStatement getStatement(String query) throws RepositoryException {
        try {
            return connection.prepareStatement(query);
        } catch (SQLException ex) {
            Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    public PreparedStatement getStatement(String query, int autokey) throws RepositoryException {
        try {
            return connection.prepareStatement(query, autokey);
        } catch (SQLException ex) {
            Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    public <T extends Statement> T getCallableStatement(String query) throws RepositoryException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T extends Statement> T getCallableStatement(String query, int transactionIsolationLevel) throws RepositoryException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void openSession() throws RepositoryException {
    }

    @Override
    public void cleanup() throws RepositoryException {
        try {
            connection.rollback();
        } catch (SQLException ex) {
            Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void commit() throws RepositoryException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void closeSession() throws RepositoryException {
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (SQLException ex) {
                Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (preparedStatement != null) {
            try {
                preparedStatement.close();
            } catch (SQLException ex) {
                Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException ex) {
                Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(TestDatabase.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Override
    public void close() throws Exception {
        closeSession();
    }

}
